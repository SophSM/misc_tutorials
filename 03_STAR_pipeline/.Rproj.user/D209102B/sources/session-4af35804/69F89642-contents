---
title: "GWA BC"
author: "Sofia Salazar"
date: "2023-10-16"
description: "Exploring sum stats"
categories: [BCAC]
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
    code-overflow: wrap
editor_options: 
  chunk_output_type: console
---

# Libraries


```{r}
library(data.table)
library(ggplot2)
library(tidyverse)
library(lattice)
```

# Load summary stats data

```{r}
setwd("/Users/sofiasalazar/Desktop/LAB/IM-lab/BC_GWA")
sum_stats <- fread('cat icogs_onco_gwas_meta_overall_breast_cancer_summary_level_statistics.txt')
sum_stats<- (as.data.frame(sum_stats))
```


```{r}
head(sum_stats)
```


```{r}
colnames(sum_stats)
```

Following what the paper says:

"To identify variants for overall breast cancer (invasive, in situ or unknown invasiveness) in BCAC, we used standard logistic regression to estimate odds ratios (ORs) and 95% confidence intervals (95% CIs), adjusting for country and principal components. iCOGS and OncoArray data were evaluated separately and the results were combined with those from the 11 other GWASs using fixed-effects meta-analysis."

We will focus first on the 'meta' statistics first

# Meta

Adding the variant name, chr and position from iCOGs


```{r}
meta_sum_stats <- sum_stats[, c(1, 9,10, grep("eta$", names(sum_stats)))]
head(meta_sum_stats)
```

### Manhattan Plot

Sub-setting columns, only the ones needed for the Manhattan plot

Columns: Chromosome, Position and P-value

```{r}
manhattan_data <- meta_sum_stats[,c(1, 2, 3, 10)]
```

Renaming columns

```{r}
colnames(manhattan_data) <- c("snp", "chr", "pos", "pval")
manhattan_data$chr <- as.numeric(manhattan_data$chr)
head(manhattan_data)
```


Manhattan plot function

```{r}
manhattan.plot<-function(chr, pos, pvalue, 
	sig.level=NA, annotate=NULL, ann.default=list(),
	should.thin=T, thin.pos.places=2, thin.logp.places=2, 
	xlab="Chromosome", ylab=expression(-log[10](p-value)),
	col=c("royalblue","orange2"), panel.extra=NULL, pch=20, cex=0.8,...) {

	if (length(chr)==0) stop("chromosome vector is empty")
	if (length(pos)==0) stop("position vector is empty")
	if (length(pvalue)==0) stop("pvalue vector is empty")

	#make sure we have an ordered factor
	if(!is.ordered(chr)) {
		chr <- ordered(chr)
	} else {
		chr <- chr[,drop=T]
	}

	#make sure positions are in kbp
	if (any(pos>1e6)) pos<-pos/1e6;

	#calculate absolute genomic position
	#from relative chromosomal positions
	posmin <- tapply(pos,chr, min);
	posmax <- tapply(pos,chr, max);
	posshift <- head(c(0,cumsum(posmax)),-1);
	names(posshift) <- levels(chr)
	genpos <- pos + posshift[chr];
	getGenPos<-function(cchr, cpos) {
		p<-posshift[as.character(cchr)]+cpos
		return(p)
	}

	#parse annotations
	grp <- NULL
	ann.settings <- list()
	label.default<-list(x="peak",y="peak",adj=NULL, pos=3, offset=0.5, 
		col=NULL, fontface=NULL, fontsize=NULL, show=F)
	parse.label<-function(rawval, groupname) {
		r<-list(text=groupname)
		if(is.logical(rawval)) {
			if(!rawval) {r$show <- F}
		} else if (is.character(rawval) || is.expression(rawval)) {
			if(nchar(rawval)>=1) {
				r$text <- rawval
			}
		} else if (is.list(rawval)) {
			r <- modifyList(r, rawval)
		}
		return(r)
	}

	if(!is.null(annotate)) {
		if (is.list(annotate)) {
			grp <- annotate[[1]]
		} else {
			grp <- annotate
		} 
		if (!is.factor(grp)) {
			grp <- factor(grp)
		}
	} else {
		grp <- factor(rep(1, times=length(pvalue)))
	}
  
	ann.settings<-vector("list", length(levels(grp)))
	ann.settings[[1]]<-list(pch=pch, col=col, cex=cex, fill=col, label=label.default)

	if (length(ann.settings)>1) { 
		lcols<-trellis.par.get("superpose.symbol")$col 
		lfills<-trellis.par.get("superpose.symbol")$fill
		for(i in 2:length(levels(grp))) {
			ann.settings[[i]]<-list(pch=pch, 
				col=lcols[(i-2) %% length(lcols) +1 ], 
				fill=lfills[(i-2) %% length(lfills) +1 ], 
				cex=cex, label=label.default);
			ann.settings[[i]]$label$show <- T
		}
		names(ann.settings)<-levels(grp)
	}
	for(i in 1:length(ann.settings)) {
		if (i>1) {ann.settings[[i]] <- modifyList(ann.settings[[i]], ann.default)}
		ann.settings[[i]]$label <- modifyList(ann.settings[[i]]$label, 
			parse.label(ann.settings[[i]]$label, levels(grp)[i]))
	}
	if(is.list(annotate) && length(annotate)>1) {
		user.cols <- 2:length(annotate)
		ann.cols <- c()
		if(!is.null(names(annotate[-1])) && all(names(annotate[-1])!="")) {
			ann.cols<-match(names(annotate)[-1], names(ann.settings))
		} else {
			ann.cols<-user.cols-1
		}
		for(i in seq_along(user.cols)) {
			if(!is.null(annotate[[user.cols[i]]]$label)) {
				annotate[[user.cols[i]]]$label<-parse.label(annotate[[user.cols[i]]]$label, 
					levels(grp)[ann.cols[i]])
			}
			ann.settings[[ann.cols[i]]]<-modifyList(ann.settings[[ann.cols[i]]], 
				annotate[[user.cols[i]]])
		}
	}
 	rm(annotate)

	#reduce number of points plotted
	if(should.thin) {
		thinned <- unique(data.frame(
			logp=round(-log10(pvalue),thin.logp.places), 
			pos=round(genpos,thin.pos.places), 
			chr=chr,
			grp=grp)
		)
		logp <- thinned$logp
		genpos <- thinned$pos
		chr <- thinned$chr
		grp <- thinned$grp
		rm(thinned)
	} else {
		logp <- -log10(pvalue)
	}
	rm(pos, pvalue)
	gc()

	#custom axis to print chromosome names
	axis.chr <- function(side,...) {
		if(side=="bottom") {
			panel.axis(side=side, outside=T,
				at=((posmax+posmin)/2+posshift),
				labels=levels(chr), 
				ticks=F, rot=0,
				check.overlap=F
			)
		} else if (side=="top" || side=="right") {
			panel.axis(side=side, draw.labels=F, ticks=F);
		}
		else {
			axis.default(side=side,...);
		}
	 }

	#make sure the y-lim covers the range (plus a bit more to look nice)
	prepanel.chr<-function(x,y,...) { 
		A<-list();
		maxy<-ceiling(max(y, ifelse(!is.na(sig.level), -log10(sig.level), 0)))+.5;
		A$ylim=c(0,maxy+10);
		A;
	}

	xyplot(logp~genpos, chr=chr, groups=grp,
		axis=axis.chr, ann.settings=ann.settings, 
		prepanel=prepanel.chr, scales=list(axs="i"),
		panel=function(x, y, ..., getgenpos) {
			if(!is.na(sig.level)) {
				#add significance line (if requested)
				panel.abline(h=-log10(sig.level), lty=2);
			}
			panel.superpose(x, y, ..., getgenpos=getgenpos);
			if(!is.null(panel.extra)) {
				panel.extra(x,y, getgenpos, ...)
			}
		},
		panel.groups = function(x,y,..., subscripts, group.number) {
			A<-list(...)
			#allow for different annotation settings
			gs <- ann.settings[[group.number]]
			A$col.symbol <- gs$col[(as.numeric(chr[subscripts])-1) %% length(gs$col) + 1]    
			A$cex <- gs$cex[(as.numeric(chr[subscripts])-1) %% length(gs$cex) + 1]
			A$pch <- gs$pch[(as.numeric(chr[subscripts])-1) %% length(gs$pch) + 1]
			A$fill <- gs$fill[(as.numeric(chr[subscripts])-1) %% length(gs$fill) + 1]
			A$x <- x
			A$y <- y
			do.call("panel.xyplot", A)
			#draw labels (if requested)
			if(gs$label$show) {
				gt<-gs$label
				names(gt)[which(names(gt)=="text")]<-"labels"
				gt$show<-NULL
				if(is.character(gt$x) | is.character(gt$y)) {
					peak = which.max(y)
					center = mean(range(x))
					if (is.character(gt$x)) {
						if(gt$x=="peak") {gt$x<-x[peak]}
						if(gt$x=="center") {gt$x<-center}
					}
					if (is.character(gt$y)) {
						if(gt$y=="peak") {gt$y<-y[peak]}
					}
				}
				if(is.list(gt$x)) {
					gt$x<-A$getgenpos(gt$x[[1]],gt$x[[2]])
				}
				do.call("panel.text", gt)
			}
		},
		xlab=xlab, ylab=ylab, 
		panel.extra=panel.extra, getgenpos=getGenPos, ...
	);
}
```

Subset of only 1M snps for visualization

```{r}
manhattan_data_subset <- manhattan_data[order(manhattan_data$pval), ]
manhattan_data_subset <- head(manhattan_data_subset,1000000)
manhattan_data_subset <- manhattan_data_subset[manhattan_data_subset$pval>0, ]
```

### Plot manhattan plot

```{r}
p <- manhattan.plot(manhattan_data_subset$chr, manhattan_data_subset$pos, manhattan_data_subset$pval)
p
```


- Since for the manhattan plot I had to ignore the genes with a p-value = 0, let's create a list of the top 20 most significant genes, including those with p-value = 0.


```{r}
top_loci_meta <- head(meta_sum_stats[(order(meta_sum_stats$p.meta)),c(1, 2, 3, 10)], 100)
colnames(top_loci_meta) <- c('loci', 'chromosome','position','pval_meta')
top_loci_meta
```


# GWAS data

```{r}
colnames(sum_stats)
```


```{r}
gwas_sum_stats <- sum_stats[, c(1, 9, 10, 7)]
colnames(gwas_sum_stats) <- c("loci", "chr", "pos", "pval")
```

Minimum p-value

```{r}
min(gwas_sum_stats$pval)
```

### Manhattan plot

```{r}
gwas_subset <- gwas_sum_stats[order(gwas_sum_stats$pval), ]
gwas_subset <- head(gwas_subset, 1000000) # 1M snps subset
```

Get top loci

```{r}
chromosomes <- 1:23
top.snps <- data.frame()
for (c in chromosomes){
  chr_snps <- gwas_subset[gwas_subset$chr==c, ]
  new_row <- chr_snps[which.min(chr_snps$pval), ]
  top.snps <- rbind(top.snps, new_row)
}
```

Annotate only top 10 loci

```{r}
top.snps <- head(top.snps[order(top.snps$pval, decreasing = F),],10)
rownames(top.snps) <- 1:10
```


```{r}
# Top loci
ann <- rep(1, length(gwas_subset$pval))
labels_vec <- c("", rep(0, 10))
for (l in top.snps$chr){
  num <- as.integer(rownames(top.snps[top.snps$chr==l,]))
  position <- top.snps[top.snps$chr==l,]$pos
  ann[with(gwas_subset, chr == l & pos == position) ]<-num + 1
  labels_vec[num + 1]<- top.snps[top.snps$chr==l,]$loci
  print(top.snps[top.snps$chr==l,]$loci)
}
ann<-factor(ann, levels=1:11, labels=labels_vec)
```


```{r}
nSNPs <- dim(gwas_sum_stats)[1]
sig.level <- 0.05 / nSNPs
p3 <- manhattan.plot(gwas_subset$chr, gwas_subset$pos, gwas_subset$pval, 
                     annotate = ann, ann.default=list(label=list(offset=0)),
                     sig.level=sig.level, points=list(pch =20))
```

```{r}
p3
```

```{r}
png("/Users/sofiasalazar/Desktop/LAB/IM-lab/BC_GWA/manhattan_GWAS_1M.png")
  p3
dev.off()
```

- Top 20 loci of GWAS data

```{r}
top_loci_gwas <- head(gwas_sum_stats[order(gwas_sum_stats$pval), c(1,4)],150)
colnames(top_loci_gwas)<-c('loci', 'pval_gwas')
top_loci_gwas
```

# iCOGs data

```{r}
icogs_sum_stats <- sum_stats[, c(1, grep("iCOGs$", names(sum_stats)))]
top_loci_icogs<- head(icogs_sum_stats[order(icogs_sum_stats$P1df_risk_chi.iCOGs),c(1, 16, 17)],150)
# top_loci_icogs2 <- head(icogs_sum_stats[order(icogs_sum_stats$P1df_risk_LRT.iCOGs),],20)
colnames(top_loci_icogs)<-c('loci','pval_iCOGs_chi', 'pval_iCOGs_LRT')
top_loci_icogs
```


# Onco data

```{r}
onco_sum_stats <- sum_stats[, c(1, grep("Onco$", names(sum_stats)))]
top_loci_onco <- head(onco_sum_stats[order(onco_sum_stats$P1df_risk_chi.Onco),c(1,16, 17)],150)
# top_loci_onco2 <- head(onco_sum_stats[order(onco_sum_stats$P1df_risk_LRT.Onco),],20)
colnames(top_loci_onco) <- c('loci', 'pval_Onco_chi', 'pval_Onco_LRT')
top_loci_onco
```

# Overall top snps

```{r}
selected_loci <- top_loci_meta %>%
  left_join(top_loci_gwas, by = "loci") %>%
  left_join(top_loci_icogs, by = "loci") %>%
  left_join(top_loci_onco, by = "loci")
```

```{r}
write.csv(selected_loci, "/Users/sofiasalazar/Desktop/LAB/IM-lab/BC_GWA/BCAC_data_top100_loci.csv")
```

